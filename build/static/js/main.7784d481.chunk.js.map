{"version":3,"sources":["components/pintereach/home.js","components/login/loginForm.js","components/login/login.js","actions/index.js","components/register/registerform.js","components/register/register.js","App.js","serviceWorker.js","reducers/pintereachReducer.js","reducers/index.js","index.js"],"names":["Home","react_default","a","createElement","Component","LoginForm","props","Form","onSubmit","handleSubmit","Label","FormGroup","for","Input","onChange","handleChanges","type","name","value","username","placeholder","password","Button","className","onClick","Login","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","setState","defineProperty","target","preventDefault","creds","state","console","log","postAuthLogin","toHome","isLoggedIn","history","push","localStorage","loginForm","connect","dispatch","axios","post","then","res","payload","data","message","catch","err","RegisterForm","postAuthReg","Register","newUser","display_name","email","img_url","displayName","toLogin","registerform","token","setItem","response","App","Route","exact","path","component","withRouter","error","Boolean","window","location","hostname","match","initialState","articles","isLoggingIn","isRegistering","isRegistered","fetchingArticles","addingArticles","addedArticles","deletingArticles","deletedArticles","reducer","arguments","length","undefined","action","objectSpread","store","createStore","rootReducer","applyMiddleware","thunk","logger","ReactDOM","render","es","BrowserRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7784d481.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return <h1>PinteReach</h1>;\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport { Button, Form, FormGroup, Label, Input } from \"reactstrap\";\r\n\r\nconst LoginForm = props => {\r\n  return (\r\n    <Form onSubmit={props.handleSubmit}>\r\n      <Label>Log In Page</Label>\r\n      <FormGroup>\r\n        <Label for=\"loginUsername\">Username</Label>\r\n        <Input\r\n          onChange={props.handleChanges}\r\n          type=\"username\"\r\n          name=\"username\"\r\n          value={props.username}\r\n          placeholder=\"Username\"\r\n        />\r\n      </FormGroup>\r\n      <FormGroup>\r\n        <Label for=\"loginPassword\">Password</Label>\r\n        <Input\r\n          onChange={props.handleChanges}\r\n          type=\"password\"\r\n          name=\"password\"\r\n          value={props.password}\r\n          placeholder=\"Password\"\r\n        />\r\n      </FormGroup>\r\n      <Button className=\"btn\" onClick={props.handleSubmit}>\r\n        Log In\r\n      </Button>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","import React, { Component } from \"react\";\r\nimport { postAuthLogin } from \"../../actions\";\r\nimport { connect } from \"react-redux\";\r\nimport LoginForm from \"./loginForm\";\r\n\r\nclass Login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      username: \"\",\r\n      password: \"\"\r\n    };\r\n  }\r\n\r\n  handleChanges = e => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const creds = {\r\n      username: this.state.username,\r\n      password: this.state.password\r\n    };\r\n    console.log(creds);\r\n    this.props.postAuthLogin(creds);\r\n    this.setState({\r\n      username: \"\",\r\n      password: \"\"\r\n    });\r\n  };\r\n\r\n  toHome = () => {\r\n    if (this.props.isLoggedIn) {\r\n      this.props.history.push(\"/user\");\r\n      console.log(\"to Home\");\r\n    } else {\r\n      console.log(\"toHome failed\");\r\n    }\r\n    console.log(\"works\");\r\n  };\r\n\r\n  render() {\r\n    console.log(localStorage);\r\n    return (\r\n      <div>\r\n        {!this.props.isLoggedIn ? (\r\n          <LoginForm\r\n            handleChanges={this.handleChanges}\r\n            handleSubmit={this.handleSubmit}\r\n            username={this.state.username}\r\n            password={this.state.password}\r\n            toHome={this.toHome}\r\n          />\r\n        ) : (\r\n          this.props.history.push(\"/user\")\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  console.log(state);\r\n  return {\r\n    isLoggedIn: state.isLoggedIn\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { postAuthLogin }\r\n)(Login);\r\n","import axios from \"axios\";\r\n\r\nexport const FETCHING_ARTICLES = \"FETCHING_ARTICLES\";\r\nexport const FETCHING_ARTICLES_SUCCESS = \"FETCHING_ARTICLES_SUCCESS\";\r\nexport const FETCHING_ARTICLES_FAILURE = \"FETCHING_ARTICLES_FAILURE\";\r\n\r\nexport const ADDING_ARTICLES = \"ADDING_ARTICLES\";\r\nexport const ADDED_ARTICLES = \"ADDEDD_ARTICLES\";\r\n\r\nexport const LOGIN_REQUEST = \"LOGIN_REQUEST\";\r\nexport const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\r\nexport const LOGIN_FAILURE = \"LOGIN_FAILURE\";\r\n\r\nexport const LOGOUT_REQUEST = \"LOGOUT_REQUEST\";\r\nexport const LOGOUT_SUCCESS = \"LOGOUT_SUCCESS\";\r\nexport const LOGOUT_FAILURE = \"LOGOUT_FAILURE\";\r\n\r\nexport const REGISTER_REQUEST = \"REGISTER_REQUEST\";\r\nexport const REGISTER_SUCCESS = \"REGISTER_SUCCESS\";\r\nexport const REGISTER_FAILURE = \"REGISTER_FAILURE\";\r\n\r\n//home\r\nexport const pinteReach = () => dispatch => {\r\n  dispatch({ type: FETCHING_ARTICLES });\r\n  axios\r\n    .get(\"https://192.168.0.7:3333/\")\r\n    .then(res =>\r\n      dispatch({ type: FETCHING_ARTICLES_SUCCESS, payload: res.data })\r\n    )\r\n    .catch(err => dispatch({ type: FETCHING_ARTICLES_FAILURE, payload: err }));\r\n};\r\n\r\n//auth\r\nexport const postAuthReg = newUser => dispatch => {\r\n  dispatch({ type: REGISTER_REQUEST });\r\n  axios\r\n    .post(\"https://pintereach.herokuapp.com/auth/register\", newUser)\r\n    .then(res => {\r\n      dispatch({ type: REGISTER_SUCCESS, payload: res.data });\r\n      console.log(res);\r\n      if (res.data.token) {\r\n        console.log(\"help\", res.data.token);\r\n        localStorage.setItem(\"token\", res.data.token);\r\n      }\r\n    })\r\n    .catch(err => {\r\n      dispatch({ type: REGISTER_FAILURE, payload: err });\r\n      console.log(err.response);\r\n    });\r\n};\r\n\r\nexport const postAuthLogin = creds => dispatch => {\r\n  dispatch({ type: LOGIN_REQUEST });\r\n  axios\r\n    .post(\"https://pintereach.herokuapp.com/auth/login\", creds)\r\n    .then(res => {\r\n      dispatch({ type: LOGIN_SUCCESS, payload: res.data });\r\n      console.log(res);\r\n      if (res.data.message) {\r\n      }\r\n    })\r\n    .catch(err => dispatch({ type: LOGIN_FAILURE, payload: err }));\r\n};\r\n\r\n// //articles\r\n// export const getArticles = () => dispatch => {\r\n//   dispatch({ type: FETCHING });\r\n//   axios\r\n//     .get(\"https://pintereach.herokuapp.com/articles\")\r\n//     .then(res => dispatch({ type: SUCCESS, payload: res.data }))\r\n//     .catch(err => dispatch({ type: FAILURE, payload: err }));\r\n// };\r\n\r\n// export const getArtId = id => dispatch => {\r\n//   dispatch({ type: FETCHING });\r\n//   axios\r\n//     .get(`https://pintereach.herokuapp.com/articles/${id}`)\r\n//     .then(res => dispatch({ type: SUCCESS, payload: res.data }))\r\n//     .catch(err => dispatch({ type: FAILURE, payload: err }));\r\n// };\r\n\r\n// export const getArtIdUsers = (id, user) => dispatch => {\r\n//   dispatch({ type: FETCHING });\r\n//   axios\r\n//     .get(`https://pintereach.herokuapp.com/articles/${3}/users`)\r\n//     .then(res => dispatch({ type: SUCCESS, payload: res.data }))\r\n//     .catch(err => dispatch({ type: FAILURE, payload: err }));\r\n// };\r\n\r\n// export const getArtUsers = users => dispatch => {\r\n//   dispatch({ type: FETCHING });\r\n//   axios\r\n//     .get(\"https://pintereach.herokuapp.com/articles/users/\")\r\n//     .then(res => dispatch({ type: SUCCESS, payload: res.data }))\r\n//     .catch(err => dispatch({ type: FAILURE, payload: err }));\r\n// };\r\n\r\n// export const postArticles = headersObj => dispatch => {\r\n//   dispatch({ type: ADDING });\r\n//   axios\r\n//     .post(`https://pintereach.herokuapp.com/articles`, headersObj)\r\n//     .then(res => dispatch({ type: ADDED, payload: res.data }))\r\n//     .catch(err => dispatch({ type: FAILURE, payload: err }));\r\n// };\r\n\r\n// export const putArtId = (id, headersObj) => dispatch => {\r\n//   dispatch({ type: UPDATING });\r\n//   axios\r\n//     .put(`https://pintereach.herokuapp.com/articles/${id}`, headersObj)\r\n//     .then(res => dispatch({ type: UPDATED, payload: res.data }))\r\n//     .catch(err => dispatch({ type: FAILURE, payload: err }));\r\n// };\r\n\r\n// export const deleteArtId = (id, headersObj) => dispatch => {\r\n//   dispatch({ type: DELETING });\r\n//   axios\r\n//     .delete(`https://pintereach.herokuapp.com/articles/${id}`, headersObj)\r\n//     .then(res => dispatch({ type: DELETED, payload: res.data }))\r\n//     .catch(err => dispatch({ type: FAILURE, payload: err }));\r\n// };\r\n\r\n// //users\r\n// export const getUsers = () => dispatch => {\r\n//   dispatch({ type: FETCHING });\r\n//   axios\r\n//     .get(\"https://pintereach.herokuapp.com/users\")\r\n//     .then(res => dispatch({ type: SUCCESS, payload: res.data }))\r\n//     .catch(err => dispatch({ type: FAILURE, payload: err }));\r\n// };\r\n\r\n// export const getUsersId = id => dispatch => {\r\n//   dispatch({ type: FETCHING });\r\n//   axios\r\n//     .get(`https://pintereach.herokuapp.com/users/${id}`)\r\n//     .then(res => dispatch({ type: SUCCESS, payload: res.data }))\r\n//     .catch(err => dispatch({ type: FAILURE, payload: err }));\r\n// };\r\n\r\n// export const getUsersArt = () => dispatch => {\r\n//   dispatch({ type: FETCHING });\r\n//   axios\r\n//     .get(`https://pintereach.herokuapp.com/users/articles`)\r\n//     .then(res => dispatch({ type: SUCCESS, payload: res.data }))\r\n//     .catch(err => dispatch({ type: FAILURE, payload: err }));\r\n// };\r\n\r\n// export const getUserIdArt = id => dispatch => {\r\n//   dispatch({ type: FETCHING });\r\n//   axios\r\n//     .get(`https://pintereach.herokuapp.com/users/${id}/articles`)\r\n//     .then(res => dispatch({ type: SUCCESS, payload: res.data }))\r\n//     .catch(err => dispatch({ type: FAILURE, payload: err }));\r\n// };\r\n\r\n// export const getUserIdArtId = id => dispatch => {\r\n//   dispatch({ type: FETCHING });\r\n//   axios\r\n//     .get(`https://pintereach.herokuapp.com/users/${id}/articles/${id}`)\r\n//     .then(res => dispatch({ type: SUCCESS, payload: res.data }))\r\n//     .catch(err => dispatch({ type: FAILURE, payload: err }));\r\n// };\r\n\r\n// export const postUserArt = headersObj => dispatch => {\r\n//   dispatch({ type: ADDING });\r\n//   axios\r\n//     .post(`https://pintereach.herokuapp.com/users/articles`, headersObj)\r\n//     .then(res => dispatch({ type: ADDED, payload: res.data }))\r\n//     .catch(err => dispatch({ type: FAILURE, payload: err }));\r\n// };\r\n\r\n// export const putUsers = (id, headersObj) => dispatch => {\r\n//   dispatch({ type: UPDATING });\r\n//   axios\r\n//     .put(`https://pintereach.herokuapp.com/users/${id}/articles`, headersObj)\r\n//     .then(res => dispatch({ type: UPDATED, payload: res.data }))\r\n//     .catch(err => dispatch({ type: FAILURE, payload: err }));\r\n// };\r\n\r\n// export const deleteUsers = headersObj => dispatch => {\r\n//   dispatch({ type: DELETING });\r\n//   axios\r\n//     .delete(`https://pintereach.herokuapp.com/users`, headersObj)\r\n//     .then(res => dispatch({ type: DELETED, payload: res.data }))\r\n//     .catch(err => dispatch({ type: FAILURE, payload: err }));\r\n// };\r\n\r\n// export const deleteUsersArt = headersObj => dispatch => {\r\n//   dispatch({ type: DELETING });\r\n//   axios\r\n//     .delete(`https://pintereach.herokuapp.com/users/articles`, headersObj)\r\n//     .then(res => dispatch({ type: DELETED, payload: res.data }))\r\n//     .catch(err => dispatch({ type: FAILURE, payload: err }));\r\n// };\r\n\r\n// export const deleteUsersArtId = (id, headersObj) => dispatch => {\r\n//   dispatch({ type: DELETING });\r\n//   axios\r\n//     .delete(`https://pintereach.herokuapp.com/users/articles/${id}`, headersObj)\r\n//     .then(res => dispatch({ type: DELETED, payload: res.data }))\r\n//     .catch(err => dispatch({ type: FAILURE, payload: err }));\r\n// };\r\n","import React from \"react\";\r\nimport { Button, Form, FormGroup, Label, Input } from \"reactstrap\";\r\n\r\nconst RegisterForm = props => {\r\n  return (\r\n    <Form onSubmit={props.postAuthReg}>\r\n      <Label>Register Page</Label>\r\n      <FormGroup>\r\n        <Label>Username</Label>\r\n        <Input\r\n          type=\"text\"\r\n          name=\"username\"\r\n          value={props.username}\r\n          placeholder=\"Username\"\r\n          onChange={props.handleChanges}\r\n        />\r\n      </FormGroup>\r\n      <FormGroup>\r\n        <Label>Password</Label>\r\n        <Input\r\n          type=\"text\"\r\n          name=\"password\"\r\n          value={props.password}\r\n          placeholder=\"Password\"\r\n          onChange={props.handleChanges}\r\n        />\r\n      </FormGroup>\r\n      <Button onClick={props.handleSubmit}>Register</Button>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default RegisterForm;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { postAuthReg } from \"../../actions\";\r\nimport RegisterForm from \"./registerform\";\r\n\r\nclass Register extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      username: \"\",\r\n      password: \"\"\r\n    };\r\n  }\r\n\r\n  handleChanges = e => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const newUser = {\r\n      username: this.state.username,\r\n      display_name: \"\",\r\n      password: this.state.password,\r\n      email: \"\",\r\n      img_url: \"\"\r\n    };\r\n    console.log(newUser);\r\n    this.props.postAuthReg(newUser);\r\n    this.setState({\r\n      username: \"\",\r\n      displayName: \"\",\r\n      password: \"\"\r\n    });\r\n  };\r\n\r\n  toLogin = () => {\r\n    this.props.history.push(\"/login\");\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <RegisterForm\r\n          handleChanges={this.handleChanges}\r\n          handleSubmit={this.handleSubmit}\r\n          username={this.state.username}\r\n          password={this.state.password}\r\n        />\r\n\r\n        <button onClick={this.toLogin}>Login</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  console.log(state);\r\n  return {};\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  { postAuthReg }\r\n)(Register);\r\n","import React, { Component } from \"react\";\r\n// import logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport { Route } from \"react-router-dom\";\r\nimport { withRouter } from \"react-router\";\r\nimport { connect } from \"react-redux\";\r\nimport Home from \"./components/pintereach/home\";\r\nimport Login from \"./components/login/login\";\r\nimport Register from \"./components/register/register\";\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    // this.props.pinteReach();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Route exact path=\"/\" component={Register} />\r\n        <Route path=\"/login\" component={Login} />\r\n        <Route path=\"/user\" component={Home} />\r\n        <Route />\r\n        {/* {!this.props.isLoggedIn ? <Authenticate /> : <Home />} */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  console.log(state);\r\n  console.log(localStorage);\r\n  return {\r\n    isLoggedIn: state.isLoggedIn,\r\n    error: state.error\r\n  };\r\n};\r\n\r\nexport default withRouter(\r\n  connect(\r\n    mapStateToProps,\r\n    {}\r\n  )(App)\r\n);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import {\r\n  FETCHING_ARTICLES,\r\n  FETCHING_ARTICLES_SUCCESS,\r\n  FETCHING_ARTICLES_FAILURE,\r\n  LOGIN_REQUEST,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAILURE,\r\n  REGISTER_REQUEST,\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAILURE\r\n} from \"../actions\";\r\n\r\nconst initialState = {\r\n  error: null,\r\n  articles: [],\r\n  isLoggingIn: false,\r\n  isLoggedIn: false,\r\n  isRegistering: false,\r\n  isRegistered: false,\r\n  fetchingArticles: false,\r\n  addingArticles: false,\r\n  addedArticles: false,\r\n  deletingArticles: false,\r\n  deletedArticles: false\r\n};\r\n\r\nconst pintereachReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case FETCHING_ARTICLES:\r\n      return {\r\n        ...state,\r\n        fetchingArticles: true\r\n      };\r\n    case FETCHING_ARTICLES_SUCCESS:\r\n      return {\r\n        ...state,\r\n        articles: action.payload,\r\n        fetchingArticles: false\r\n      };\r\n    case FETCHING_ARTICLES_FAILURE:\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        fetchingArticles: false\r\n      };\r\n    case LOGIN_REQUEST:\r\n      return {\r\n        ...state,\r\n        isLoggingIn: true\r\n      };\r\n    case LOGIN_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isLoggedIn: true,\r\n        isLoggingIn: false\r\n      };\r\n    case LOGIN_FAILURE:\r\n      return {\r\n        ...state,\r\n        isLoggedIn: false,\r\n        isLoggingIn: false,\r\n        error: action.payload\r\n      };\r\n    case REGISTER_REQUEST:\r\n      return {\r\n        ...state,\r\n        isRegistering: true\r\n      };\r\n    case REGISTER_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isRegistering: false,\r\n        isRegistered: true\r\n      };\r\n    case REGISTER_FAILURE:\r\n      return {\r\n        ...state,\r\n        isRegistered: false,\r\n        isRegistering: false,\r\n        error: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default pintereachReducer;\r\n","import pintereachReducer from \"./pintereachReducer\";\r\n\r\nconst reducer = pintereachReducer;\r\n\r\nexport default reducer;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport thunk from \"redux-thunk\";\r\nimport logger from \"redux-logger\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport rootReducer from \"./reducers\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk, logger));\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <Router>\r\n      <App />\r\n    </Router>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}